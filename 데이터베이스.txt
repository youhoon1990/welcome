일부칼럼은   프로젝션 기능
조인	여러개의 데이터 테이블, n개이상의 테이블에서 검색

*은 all이라는 뜻


comlumn department_name format a17

a17 알파벳자리수 말함

comlumn department_name clear


employees 테이블 모든 ㄷ데이터

컴파일 3단계로 (검증, 실행계획, 

SQL*Plus: Release 11.2.0.2.0 Production on 화 11월 17 10:01:21 2020

Copyright (c) 1982, 2014, Oracle.  All rights reserved.

SQL> conn system/12345
Connected.
SQL> alter user hr
  2  identified by hr;

User altered.

SQL> alter user hr
  2  account unlock;

User altered.

SQL> conn hr/hr
Connected.
SQL>

숫자는 오른쪽     문자열는 왼쪽
칼럼 헤딩들은 항상 대문자로 출력

날짜는 +-가능  */불가능

nvl 함null값 대체   null value language


SELECT last_name, salary*12*nvl(commission_pct,1)  from employees;

allias 는 공백보단 as 써주는게 성능적으로 좋음
"" 쓰면 대소문자 섞임  즉 대문자로 안바뀜  그리고 복수 문장 쓰고 싶을때

as와 "" 굳이 2개 붙여서 쓸 필요 없음
select last_name || job_id AS "Employees" FROM employees;

리터럴 문자열 (기억하면 좋음?)

그중에서 문자열과 날자는 ''  싱글퍼테이션 반드시 찍어줘야함

disctinct      중복제거      멀티플 중복제거도 가능

2장 where절

where 절이 select절 보다 먼저 실행되서  행이 제한된다고 보면 된다.

연산자   <> 보다 !=가 더 빠름 성능적 측면
where절에 있는 칼럼들은 셀렉문안에 넣어주는게 좋다

between 은 date와 string 에도 모두가능하나 의미는 없다 

d1118

IN 연산자 = 복수연산자
LIKE 연산자    %는 문장전체의미, _는 문자 하나를 의미함
LKIKE 'S%'; 는 S가 들어가는 문장 전체
%s% 는 s로시작하거나 끝나는 것

null 연산자 >>  IS NULL;

작년 정보처리 실기에 LIKE 나왔음
조건이 여러개라면?  AND OR NOT 연산자
칼럼 앞에 NOT 쓸수 잇음
WHERE not department_id=90;

ORDER BY 절 (정렬) 오름 VS 내림  ascending  descending  오름차순이 기본값
ORDER BY NUMBER (이건 버그 같은 것  칼럼 숫자 말함 3넣으면 3번째 칼럼 정렬됨)
ORDER BY 는 맨 마지막 줄이라 그 뒤에는 다른 명령어 불가
널값 오름차순에선 마지막에   내림차순에는 처음에 (즉 값이 높다는 뜻?)

ORDER BY 는 WHERE절과 다르게 ALLIAS 써도 알아먹음.


SELECT last_name, salary*12 ANNSAL
FROM employees
ORDER BY department_id, salary*12 DESC

// 멀티플 정렬이 됨  부서별로 되버림

실습문제

SELECT last_name
FROM employees
WHERE last_name like '%a%'  and last_name like  '%e%'
/
만약  %a%e% 로 하면 무조건  a e만 찾음    e a 는 못찾음

d1119

조인하려면
where 절에  n-1에 해당하는 조건을 반드시 적어줘야함

오라클 전용조인만 살펴봄(어차피 명령어만 다름)

등가조인 : 데이터가 같을떄
비등가 : 같은 데터 없을때
아우터조인 : 어느 한쪽 데이터가 많을때
포괄조인 : 등가조인의 확장형
셀프조인 : 테이블 하나 (어렵다)

from join에서도 allias 쓸 수 있다?

select e.last_name, d.department_name, e.department_id
from employees  e, departments  d
where employees.department_id=departments.department_id
/

//혼용은 불가  from selec 둘다 allias 써라

join 쓸 때  추가조건은 and써라  or쓰지마

아우터조인
select e.last_name, d.department_name, e.department_id
from employees e, departments d
where e.department_id = d.department_id(+)
/

//부족한쪽에 + 쓰면

비등가조인 where e.salary between j.lowest_sal and j.highest_sal;
대부분 between 씀   
비등가조인은 자주쓰진 않음


select e.last_name, d.department_name, d.location_id, l.city
from employees e, departments d, locations l
where  e.department_id = d.department_id
and d.location_id = l.location_id
and e.commission_pct is not null
/











//성능 측면 고려하면 조인을 먼저 쓰는 게 좋다. 

근무사원번호, 이름, 관리자번호, 관리자이름 출력
//자체참조

select e.employee_id, e.last_name, e.manager_id, m.last_name
from employees e, employees m
where e.manager_id = m.employee_id
/

그룹함수 oracle은 7개
sum 과 avg는 숫자데이터만 가능 
max min 은 모든 데이터타입 가능
그룹함수들은 null을 무시함  (즉 커미션 34명 받으면 34로나눔  전체사원으로 안나눔

널값 고려하려면 nvl써라
select avg(nvl(commission_pct,0)), sum(commission_pct)/107
from employees
/



select count(distinct department_id)
from employees
/

그룹함수는 all과 distinct 옵션 두개 사용가능  기본적으로 all이 default임

d1120    250페이지
select e.last_name, e.hire_date
from employees e, employees m
where e.manger_id = m.employee_id
//////////////모르겠음


hire_date가 더 빠른얘들 찾아라


select department_id, avg(salary)
from employees;  
//오류남  그룹화시켜줘야함
>>department_id 그룹화 시켜줘야함

group by 절에 그룹화 안되는 그룹 꼭 명시 꼭해줘야 즉
>>select department_id, avg(salary)
from employees
group by department_id
/
// 셀렉절에 deparrtmen_id 안써줘도 되나 그러면 보기 불편함



select department_id, job_id, avg(salary)
from employees
group by department_id, job_id
order by department_id
/

//department_id별로 그룹화 > 업무별 > 즉 그룹화가 2번 일어남
셀렉트절에 있는 순서대로 그룹화가 시작됨


select department_id, AVG(salary)
from employees
WHERE AVG(salary) >8000
group by department_id, job_id
/
//오류남 where절이 먼저 실행되서 그룹제한이 안댐 즉 where이 아닌 
having 으로 조건설정해줘야함

having은 group에 대한 조건을 주는 것(where과 달리 나중에 실행됨 즉 avg 쓸수있음)
where절은 행을 제한, having은 그룹을 제한하는 절
having절과 group by절은 순서상관없음
having sav(salary) >800 and     이거 쓰지마 (처리속도 느림)


select department_id, MAX(salary)
from employees
group by department_id
having MAX(salary)>10000
order by department_id
/

// department 별 10000만 넘는 급여 중 최대값들 구함 

select job_id, SUM(salary) PAYROLL
FROM employees
where job_id not like '%REP%'
GROUP BY job_id
HAVING SUM(salary) > 13000
ORDER BY SUM(salary)
/

// from 절 > where절> group by절> selec절 > having절> order by절 순서로 처리

select emp.last_name, emp.employee_id, emp.hire_date
from employees emp, employees mgr
where emp.manager_id



회사 전체 쵀대 급여, 최소급여, 급여 총 합 및 평균 급여를 출력하시오
select MAX(salary), MIN(salary), SUM(salary), AVG(salary)
from employees
/


직업별 최대급여  최소급여 급여 총 합 및 평균 급여를 출력하시오
단 최대 급여는 맥스, 최소급여는 nin, 급여 총합은 sum및 평균급여는 avg로 출력하고 직업을 오름차순으로 정렬하시오

select job_id, MAX(salary) MAX,MIN(salary) MIN, SUM(salary) SUM, AVG(salary) AVG
from employees
group by job_id
order by job_id
/

연습 27
이름에 u 들어가는 사원과 동일
총 수 

select job_id, COUNT(employee_id)
from employees
group by job_id
order by job_id
/

21번 매니저 근무하는 사원 총 수 

22. 사내의 최대 급여 및 최소 급여의 차이
select MAX(salary)-MIN(salary)

23번  매니저의 사번 및 그 매니저 및 사원들 중 최소급여를 받는 사원의 급여를 출력하시오
매니저가 없는 사람들은 제외한다
최소 급여가 5000미만인 경우도 제외한다
급여기준 역순으로 조회한다.

select manager_id, min(salary)
from employees
where manager_id is not null
group by manager_id
having min(salary) >= 5000
order by min(salary) desc
/


  1  select manager_id, min(salary)
  2  from employees
  3  where salary>5000
  4  group by manager_id
  5* having manager_id is not null
SQL> /

// 내가 낸 오답  위임

24번 부서명 부서위치id 각부서별 사원 총수 , 각 부서별 평균 그병를 출력하되 부서위치를 오름차순으로

select d.location_id,  count(e.department_id), AVG(e.salary), d.department_name
from employees e, departments d
where e.department_id = d.department_id
group by   d.department_name, d.location_id
order by d.location_id
/

>> order by 는   그룹함수 안쓴 모든 셀렉문을 써줘야함


Q 아벨이라는 사원 급여보다 더 많은 급여를 받는 사원의 이름과 급여를 출력하시오
(아벨 급여 검색 없이 한번에 처리하는 법) >> 서브쿼리

select last_name, salary
from employees
where salary >(select salary
		from employees 
		where last_name = 'Abel')
/


서브쿼리는 먼저 실행됨  서브쿼리 실행 후 값을 메인쿼리로 넘겨줌 

select   from  where having   등 거의 모든 문장에서 사용가능?
where 과 having  부터 서브쿼리 배워보자

where과 havaing 서브쿼리 안에 order by 쓸 필요 업다

정렬은 메모리에서 처리함  즉 메모리 두번 차지함 게다가 할때마다 메모리 잡아먹음

from 절에서 사용되는 order by 는 굉장히 중요함

중요- 단일 행 서브 쿼리에는 단일 행 연산자를 사용합니다. 다중행 서브쿼리에는 다중 행 연산자를 사용합니다.


select last_name, job_id
from employees
where job_id = (select job_id
			from employees
			where employee_id = 141)
/


d1123

서브쿼리 
연산자를 잘쓰자.  단일쓸것인지

서브쿼리가 널값을 반환하지 않게 주의할 것

다중행 서브쿼리
in
>any (최소값 보다 큰 값 출력)
<any (최대값 보다 작은값 출력)
>all (최대값 보다 큰 값)
<all (최소값 보다 작은 값)

서브쿼리 잘쓰면 조인해결가능?
 


 1  SELECT employee_id, hire_date
  2  from employees
  3  where department_id  = (select department_id
  4             from employees
  5*            where last_name = 'Zlotkey')
SQL> /



실습  회사전체 평균급여보다 더 많이 받는 사원 이름과 사번 
select last_name, employee_id
from employees
where salary > (select avg(salary)
			from employees)
/


실습 27
select last_name, employee_id
from employees
where department_id in (select department_id
			from employees
			where last_name like '%u%')
/

실습 28  시에틀 근무 사람 중  커미션 받지 않는 모든 사람들의 이름 부서명 지역 id

내 제출
select e.last_name, d.department_name, d.location_id
from employees e, departments d
where e.commission_pct is null
and e.department_id = d.department_id
/
/

select e.last_name, d.department_name, d.location_id
from employees e, departments d
where e.commission_pct is null
and d.location_id = (select location_id
		from locations
		where city = 'Seattle')
and e.department_id = d.department_id
/





실습 29  davies 사람보다 후에 고용된 사람들의 이름 및 고용일자를 역순으로 출력

내제출
select last_name, hire_date
from employees
where hire_date > (select hire_date
		from employees
		where last_name = 'Davies')
order by hire_date
/



실습 30 king을 매니저로 두고 있는 모든
 사원 이름 및 급여


내제출
select e.last_name, e.salary, manager_id
from employees e
where manager_id in (select employee_id
		from employees
		where last_name = 'King')
/

실습 31 회사 전체의 평균 급여보다 더 많이 받는 사원들 중에 이름에 u가 있는 
사원들이 근무하는 부서에서 근무하는 사원들의 사번 이름 및 급여를 출력하시오

내 제출
select last_name, salary
from employees
where salary > (select avg(salary)
		from employees
)
and department_id in( select department_id
			from employees
			where last_name like '%u%')
/




select last_name, salary
from employees
where department_id in( select department_id
			from employees
			where last_name like '%u%'
		and salary > (select avg(salary)
		from employees)
)
/


)
/

8장 dml
트랜잭션에 영향 x   단순히 검색에만 미침 영향

그러나 ddl  dcl    얘들은 오토커밋이 되버림

insert delete 는 행단위 작업
update 는 열단위 작업

insert는 테이블의 맨 마지막 라인에 추가됨
한번에 한 행만 추가됨  즉 100개 넣으려면  100번 인서트 해야 

테이블 이름만 넣으면 
인서트는 오류가 많다 

인서트는 무결성 검사  1 컬럼 무결성  2. 제약조건 무결성

셀렉만으로는 저장이 안된 것  트랜잭션 되야함  (저장ㅇ은 커밋   삭제는 롤백)

널 값 입력은  암시적으로 하는 법과 직접 null 입력하는 것 둘다 가능
(직접  입력하는 것이 선호됨)



d1124
select sysdate
from dual;


sysdate 는 꽤 많이 사용 됨 알고 있어라

update 문장
update에도 서브쿼리 사용가능   

delete from 테이블이름
where절은 선택사항  > 안쓰면 모든 행 삭제

중요
primary kye 는 중복키 insert불가
update로  primary key  변경 불가  즉 테이블에  10을 50으로 바꾸는 것 불가 (자식테이블이 10번 pk를 참조하고 있다면 50이 없어도 불가)
update  pk를  자식테이블에서 안쓰고 있다면 변경 가능

delete  도  자식테이블에서 안쓰고 있으면 가능


2개켜서 트랜잭션 서로 일어나면?
select salary
from employees
where employee_id = 141
/

트랜잭션 진행
update employees
set salary = 30000
where employee_id = 141;

다른창에서  열어보면 3500 그대로 그리고 4000으로 고치면 깜빡깜빡함
이 현상을 '읽기 일관성' 그리고 병행제어라고 정의함
창1에서 30000 트랜잭션 중  창2에서 40000 입력하면 충돌
창1을 방해하지 않게  1에 락걸고   창2가 40000고치는 것 못하게 함(창1의 작업이 끝날때까지 기다려)
즉 창1에서 rollback 이나 commit 해주면 락풀리고  창2 진행가능




9장 ddl  369p

객체를 수정 생성 삭제 하는 것
테이블, 뷰, 시퀀스, 인덱스, 동의어

테이블 뷰 시퀀스   자주씀
시퀀스    번호 생성기  중복되지않게

테이블 이름 및 열 이름
/문자로 시작할 것, 30자까지 가능 ,  특수문자는_$#만 가능

create table 


insert into dept
values (20, 'ADMIN', '1800');

데이터 유형  BFILE 은  외부에 파일 저장   내부에는 포인터만 저장
데이터유형 VARCHAR  CHAR 차이  
CHAR 는  미리 크기를 지정해버림  자기가 넣을 데이터보다 20~30퍼 크게 지정하는 것ㅇ ㅣ가낭 이상적임(성능우선시 그러나 공간의 낭비가 일어남) VARCHAR 은 공간활용도중시

NUMBER,   NUMBER(P) <이건 정수,   NUMPER(P,S) < S는 소수점 자리수


DATE는 문제가 많다
TIMESTAMP 정도만 알아둬

테이블에도 서브쿼리 사용가능

create table dept80
as	 select employee_id, 
	last_name,
	 salary*12 annasl,
	 hire_date
from employees
where department_id = 80;

문제 부서별 평균 급여를 저장하는 avgdept라는 테이블을 생성하시오
단 부서번호는 DID, 평균급여는 AVGSAL로 생성하시오 


  1  create table AVGDEPT
  2  as select avg(salary) AVGSAL, department_id DID
  3             from employees
  4* group by department_id
  5  /


truncate table avgdept
/

select * from avgdept;


insert into avgdept
select department_id, avg(salary)
from employees
group by department_id
/

alter table 문 3가지 명령문 add, modify, drop
modify 는 데이터 타입과 길이를 변경
drop 컬럼 삭제할때 사용



alter table dept
add ( job_id varchar2(14)  )
/
>>칼럼추가


insert into dept(job_id)
values ('aa')
/
>>이렇게 하면 새행이 추가되버림

update dept
set job_id = 'aa'
where deptno = 10
/

컬럼 데이터 추가시키는 행위 잘 안함 그냥 기능이 있다 정도만 알아둬라

modify 

alter table dept
modify ( job_id varchar2(8) )
/

데이터타입변경은  데이타가 없을때만 가능    크기수정은 그냥 가능


drop

alter table dept
drop column job_id
/

>>컬럼 삭제 ddl명령어는  실행과 동시에 오토커밋   복구안됌
지금은 drop명령어 안씀  문제를 가지고 있음 

drop은  data 뿐만 아니라 data dictionary 와 공간까지 삭제
삭제 실행하면 dept 테이블 전체에 lock을 걸어버림

동시성도 낮아서 현업에서는 사용 잘안함   대체명령어 쓰자

unused 씀 

alter table dept
set unused (loc);

dd에  loc 가  used 로 되있는 정보를 unsed로 바꿔주는 명령어임(data와 공간 남아있음)
(drop은  data   ,  공간,  column 구조 까지 모두삭제)

그러나 used로 바꾸는 명령어는 없다  (data와 공간이 남아있는데 이걸 지우는 방법은?)
 
alter table dept
drop unused column;    하면됨

테이블 삭제
drop table dept
/

employees이 참조하므로 삭제가 안됨

테이블절단   turncated       (delete에서 where뺀것과 동일)

delete 은  dhl    >> data 삭제   얘만 ROLLBACK가능   TRUNCATE와DROP은불가
truncate 은ddl  >> data만 삭제
drop   은   >> 얜 전부삭제

단 DROP과 TURNCATE는 백업본이 있다면 복구가능
DELETE는 행단위 삭제할때
TRUNCATE는 전체삭제(디스크 조각들이 회수 됨  저장공간에 대한 성능 보장)

정리 CREATE   , ALTER  ,  ADD, MODIFY, DROP COLUMN, DROP TABLE

10장 제약조건  NOT NULL,  UNIQUE, PK,  FK, CHECK
제약조건 : 무결성 보장 조건을 말함

제약조건에 이름 지정않으면 무작위로 ORACLE 서버가 이름 생성함 
그러나 무조건 만들어준다고 보면됨

제약조건 생성시기   :  테이블 생성시, 또는 태이블생성후에

CREATE table test
( a number(3),
b number(30),
constraint test_a_pk	primary key (a));

제약조건 선언은  constraint 제약조건이름 제약조건유형 (설치 column이름)
즉 constraint   table_col_제약조건약어
constraint test_a_pk	primary key (a);

제약조건 여러개 가능 (조건마다 constraint 선언해줘야)(테이블레벨에서 선언)
constraint test_a_pk	primary key (a), 
constraint test_b_uk	unique (b)); 

참조 constraint test_b_uk   이부분 생략가능 (그러나 생략 안쓰는게 좋음)

또한 제약조건은  칼럼 옆에 바로 쓰기 가능(컬럼레벨에서 선언)
CREATE table test
( a number(3) constraint test_a_pk primary key,
b number(30));

우리는 테이블 레벨에서 제약조건 선언하자(가독성)(not null은 그냥 칼럼레벨에서 하는게보통)


SQL> create table smart(
  2  id varchar2(20),
  3  pw varchar2(20));

d1125

D:\app\oracle\product\11.2.0\server\bin

복습 modify 사이즈변경 가능   베이터타입 변경불가(이미 데이터가 있다면)
drop보다는 set unused사용함
trncate 테이블 삭제가능

not null은  constraint 생략 가능

create table employees(
	employee_id number(6),
	lastname

unique 제약조건

create table employees(
	employee_id number(6),
	lastname varchar2 (25) not null,

	constraint 

foreign key는 참조대상지정을 해줘야함(references departments (department_id)
fk는 칼럼과 타입 적는데 칼럼은 달라도 되지만 데이터 타입과 길이가 반드시 같아야함

fk 제약조건    references,  
 on delete cascade    : 자식테이블 데이터도 동시 삭제됨 (앞에서 set 배운 것과는 다르게)
cascade는 자식까지다 삭제, 레퍼런스는 종속적 삭제 안됌 , set null은 부모삭제  자식은 null로 대체됨

alter table	 employees
add constraint	emp_manager_fk
	foreign key (namager_id)
	references employees (employee_id);

not null은 modify 명령어 사용,     pk  fk ck uk는 테이블레벨 선언 방식으로 추가

제약조건 삭제 
casecade는 강력한 명령어 (종속된 것까지 삭제하라)

실습 진행

@test.sql


drop table test cascade constraints;  
//이거쓰면 다 지워짐
create table test
(a number(3),
 b number(3) not null,
 c number(3),
 constraint test_a_pk primary key(a)
);

create table test1 
(d number(3),
 e number(3),
 a number(3),
 constraint test1_d_pk primary key(d),
 constraint test1_a_fk foreign key(a) references test(a)
);


@sample,sql 
>> 이거로 생성


create table EMP
(EMPNO number(4),
 ENAME varchar2(10),
 JOB varchar2(9),
 MGR number(4),
 HIREDATE DATE,
 SAL number(7, 2),
 COMM number(7, 2),
 DEPTNO number(2)
 );


insert into dept (deptno, dname, loc)
values (20, 'Marketing', 1800)
/


update emp 갱신
  2  set sal = 9000
  3  where empno = 103;



pk fk 설정
alter table dept
add constraint dept_deptno_pk primary key(deptno);

alter table emp
add constraint emp_empno_pk primary key(empno);
	
alter table emp
add constraint emp_deptno_fk
	foreign key(deptno)
	references dept (deptno);


2권 들어감 
뷰 15p
사용하기 쉽지 않을 수 있다

데이터 엑세스 제한  (10번 부서 얘들은  10번 부서 정보만 보이게)

뷰 종류 단순뷰와 복합 뷰 있음


뷰 생성은 create view
	as 서브쿼리로만 생성가능

create view empvu80
 as select employee_id, last_name, salary
	from employees
	where department_id = 80;


create view empvu50
 as select employee_id ID_NUMBER, last_name NAME, salary*12 ANN_SALARY
	from employees
	where department_id = 50;


테이블은 실제 공간을 할당받음
뷰는 물리적인 구조가 없다 dd에 보관하다가 그냥 재실행함 테이블인것처럼

뷰 장점 (성능보다는   보안이나  편의성-복잡한질의 빠르게 볼 수 있음)
뷰 는 alter가 없고  create or replace view 로 덮어쓰는 척함

from절에서도 서브쿼리가능(인라인 뷰라고 부름)

2권 35p

우리회사에 근무하는 사원중 급여를 적게 받는 하위 3명의 이름과 급여

select rownum, salary, last_name
from (select last_name, salary
	from employees
	order by salary)
where rownum <4

인라인뷰에서는 오더바이절이 굉장히 중요한 역할
부서별 평균급여가 많은 상위 3개 부서번호와 평균급여를 출력하시오


select rownum, department_id, avgsal
from (select department_id, avg(salary) avgsal
	from employees 
	group by department_id
	order by avgsal desc)
where rownum <4;



















