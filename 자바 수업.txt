레퍼런스변수
배열 클래스 


//String 타입 변수 저장할 수 있는 하나의 레퍼런스 변수생성 후 좋아하는 음료수 3개
		String []drink = {"솔의눈", "아침햇살", "실론티"};
		//나예호 출력
		System.out.println(stu[0].getName());


객체배열쓰는법  mainStudentScore에있음

배열의 가장큰 단점 : 설정된다면  크기를 다시 바꿀 수 없다
//ArrayList    //가변배열이라고 부름
//음료수 이름을 갖고 있는 3칸짜리 배열

제네릭 =   <> 를 제네릭이라고 하고  제네릭안에는 클래스 이름이 들어갈 수 있음 

ArrayList는 메모리를 배열보다 더 잡아먹어서 각각의 장단점이 있음
가변배열은 중간에 끼워넣을수 있음 (중간에 넣으면 한칸씩 밀림)

		for(int i=0; i<snack.size(); i++) {
			System.out.println(snack.get(i));
		}

		//첵스파맛을 없애고 싶어!
		snack.remove(2);
		//전체 지우려면 
		snack.clear();

d1119
Collection
컬렉션에서 arraylist랑 linkedhashmap 정도 사용함

Map은 키값과 속성값이 있다고 생각해(나중에 함)
String은 <>  제네릭 안에 쓸 수 있음 (기본데이터가 아니라서)

int 쓰고 싶으면 integer라는 wrapper클래스써야함?

자바1.8 이상엔 <> 공백해도됨
즉  ArrayList <String> list = new ArrayList<>();
ArrayList <String> list = new ArrayList<String>();

refactor(source탭아래있음) - extract method 하면  블록친부분 메소드화 가능

자바익스플로러에서 java build path - libraries

mp3.play(list.get(0).getPath());
// 제네릭 > 객체번호써주고 > 그다음에 메소드까지 .뒤에 적을 수 있다

d1120
메소드오버로딩

부모클래스=슈퍼클래스    ,  자식클래스 == 서브클래스

WheelMouse extends mouse{	}   << 상속하는법  extends 쓰며노딤   

다중상속은 불가능하다
모든 클래스는 java.lang.Object를 상속받는다.

오버라이딩
메소드 매개변수와 타입이 일치할것 , 메소드의 리턴타입도 일치할것

@Override 그냥써줘라 오버라이딩 했다고 알려줌

업캐스팅
WildAnimal animal = null;  //널로 초기화
animal = new WildAnimal(); //생성

업캐스팅   : 하위클래스가 상위클래스 타입으로 자동타입변환하는 것 (다형성)

WildAnimal animal = null;  //널로 초기화
while (true) {
			System.out.println("---동물 사냥법---");
			System.out.println("[1]사자 [2]독수리 [3]늑대 [4]종료");
			int menu = sc.nextInt();
			
			if(menu==1){
				animal = new Lion();
				
			}else if(menu==2) {
				animal = new Eagle();
			}else if(menu==3) {
				animal = new Wolf();
			}else if(menu==4) {
				System.out.println("종료되었습니다.");
				break;
				
			}else {
				animal = new WildAnimal();
			}
			animal.hunt();
			

		}

접근제한자 protected는 상속관계에서만 사용가능 (다른패키지라도 상속이라면 접근가능)


d1123
super 는 부모클래스  this는 자기 필드안에서

업캐스팅 하면  데이터타입 달라도 배열에 넣을 수 있음
즉 자식들 데이터 타입 다른데  부모클래스의 형태로 배열 만들 수 있음

		Pokemon []포켓몬  = new Pokemon[3];						
		Pokemon 꼬부기1 = new 꼬부기();
		Pokemon 파이리1 = new 파이리();
		Pokemon 피카츄1 = new 피카츄();

만약 부모가 다른 디지몬과 피카츄를 묶어주려면?
오브젝트 배열로 만들면 됨


추상클래스   부모에서 개념만 빈칸 놔두고   자식에서 메소드 안만들면 오류뜸


인터페이스는 메소드이름 강제하려고 쓰는 것
api   app programming interface
내일 jdbc 배움


d1124
인터페이스를 사용하는 가장 큰 이유는  igame에 추상화된 메소드가 있고  igame 받는 얘들은 반드시 메소드들 구체적으로 구현시켜야함

상속은 extends로 선언 

같은 클래스 내에서    >>  오버로딩
상속받은 자식클래스에서 >> 오버라이딩

jdbc (java database connectivity)
aoo = app programming interface

jdbc 연결순서
1. jdbc driver 로딩    = 동적로딩
2 database 연결
3. sql문장실행
4. 설치종료

add external  - 오라클깔린곳에서 - product  - jdbc -  ojdbc6 추가

		/*1. 동적로딩
		 *1-1 ojdbc6.jar파일추가
		 *1-2 Class.forName()으로 경로지정
		우리가 사용할건 오라클드라이버.class
		build path
		add external  - 오라클깔린곳에서 - product  - jdbc -  ojdbc6 추가
		Class.forName("Oracle.jdbc.driver.OracleDriver");
		
		*/

try/catch

	try {
			Class.forName("Oracle.jdbc.driver.OracleDriver");
		} catch (ClassNotFoundException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}

자바의 예외처리라고 함 try catch

에러가 나면 콘솔창에 써줌  (캐치)

sql 스크랩북 만듬

d1125

Exception 만쓰면 코드는 깔끔해지나 시간이 오래거림   exception들은 모든 exception들의 부모

catch (ClassNotFoundException | SQLException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		} 


테이블에 행이 업다면 오류생김 (rs.next())
디자인패턴
model view controller  
view는  이용자들에게 보여지는 것들만
model  데이터 주고받는 객체들
	모델은 dao(data access object), dto(data transfer object)  2가지 있다?
